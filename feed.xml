<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://mhoo999.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://mhoo999.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-05-06T07:00:45+00:00</updated><id>https://mhoo999.github.io/feed.xml</id><title type="html">TechHoonology</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">[백준] 10866번 덱 / C++</title><link href="https://mhoo999.github.io/blog/2024/boj10866/" rel="alternate" type="text/html" title="[백준] 10866번 덱 / C++"/><published>2024-05-06T00:00:00+00:00</published><updated>2024-05-06T00:00:00+00:00</updated><id>https://mhoo999.github.io/blog/2024/boj10866</id><content type="html" xml:base="https://mhoo999.github.io/blog/2024/boj10866/"><![CDATA[<h3 id="문제">#문제</h3> <p><a href="https://www.acmicpc.net/problem/10866">백준 10866번 덱</a></p> <h3 id="풀이">#풀이</h3> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;memory&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">struct</span> <span class="nc">Node</span>
<span class="p">{</span>
	<span class="kt">int</span> <span class="n">data</span><span class="p">;</span>
	<span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">Node</span><span class="o">&gt;</span> <span class="n">prevNode</span><span class="p">;</span>
	<span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">Node</span><span class="o">&gt;</span> <span class="n">nextNode</span><span class="p">;</span>

	<span class="n">Node</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="o">:</span> <span class="n">data</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="n">prevNode</span><span class="p">(</span><span class="nb">nullptr</span><span class="p">),</span> <span class="n">nextNode</span><span class="p">(</span><span class="nb">nullptr</span><span class="p">)</span> <span class="p">{}</span>
<span class="p">};</span>

<span class="k">class</span> <span class="nc">Deck</span>
<span class="p">{</span>
	<span class="kt">int</span> <span class="n">size</span><span class="p">;</span>
	<span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">Node</span><span class="o">&gt;</span> <span class="n">front</span><span class="p">;</span>
	<span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">Node</span><span class="o">&gt;</span> <span class="n">back</span><span class="p">;</span>

<span class="nl">public:</span>
	<span class="n">Deck</span><span class="p">()</span> <span class="o">:</span> <span class="n">size</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="n">front</span><span class="p">(</span><span class="nb">nullptr</span><span class="p">),</span> <span class="n">back</span><span class="p">(</span><span class="nb">nullptr</span><span class="p">)</span> <span class="p">{}</span>

	<span class="kt">void</span> <span class="nf">Push_front</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="k">auto</span> <span class="n">newNode</span> <span class="o">=</span> <span class="n">make_shared</span><span class="o">&lt;</span><span class="n">Node</span><span class="o">&gt;</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>

		<span class="k">if</span> <span class="p">(</span><span class="n">size</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">front</span> <span class="o">=</span> <span class="n">newNode</span><span class="p">;</span>
			<span class="n">back</span> <span class="o">=</span> <span class="n">newNode</span><span class="p">;</span>
		<span class="p">}</span>
		<span class="k">else</span>
		<span class="p">{</span>
			<span class="n">front</span><span class="o">-&gt;</span><span class="n">prevNode</span> <span class="o">=</span> <span class="n">newNode</span><span class="p">;</span>
			<span class="n">newNode</span><span class="o">-&gt;</span><span class="n">nextNode</span> <span class="o">=</span> <span class="n">front</span><span class="p">;</span>
			<span class="n">front</span> <span class="o">=</span> <span class="n">newNode</span><span class="p">;</span>
		<span class="p">}</span>

		<span class="n">size</span><span class="o">++</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="kt">void</span> <span class="nf">Push_back</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="k">auto</span> <span class="n">newNode</span> <span class="o">=</span> <span class="n">make_shared</span><span class="o">&lt;</span><span class="n">Node</span><span class="o">&gt;</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>

		<span class="k">if</span> <span class="p">(</span><span class="n">size</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">front</span> <span class="o">=</span> <span class="n">newNode</span><span class="p">;</span>
			<span class="n">back</span> <span class="o">=</span> <span class="n">newNode</span><span class="p">;</span>
		<span class="p">}</span>
		<span class="k">else</span>
		<span class="p">{</span>
			<span class="n">back</span><span class="o">-&gt;</span><span class="n">nextNode</span> <span class="o">=</span> <span class="n">newNode</span><span class="p">;</span>
			<span class="n">newNode</span><span class="o">-&gt;</span><span class="n">prevNode</span><span class="o">=</span> <span class="n">back</span><span class="p">;</span>
			<span class="n">back</span> <span class="o">=</span> <span class="n">newNode</span><span class="p">;</span>
		<span class="p">}</span>

		<span class="n">size</span><span class="o">++</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="kt">void</span> <span class="nf">Pop_front</span><span class="p">()</span>
	<span class="p">{</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">size</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"-1"</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
		<span class="p">}</span>
		<span class="k">else</span>
		<span class="p">{</span>
			<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">front</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>

			<span class="k">if</span> <span class="p">(</span><span class="n">size</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span>
			<span class="p">{</span>
				<span class="n">front</span><span class="o">-&gt;</span><span class="n">nextNode</span><span class="o">-&gt;</span><span class="n">prevNode</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">;</span>
				<span class="n">front</span> <span class="o">=</span> <span class="n">front</span><span class="o">-&gt;</span><span class="n">nextNode</span><span class="p">;</span>
			<span class="p">}</span>
			<span class="k">else</span>
			<span class="p">{</span>
				<span class="n">front</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">;</span>
				<span class="n">back</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">;</span>
			<span class="p">}</span>

			<span class="n">size</span><span class="o">--</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span>

	<span class="kt">void</span> <span class="nf">Pop_back</span><span class="p">()</span>
	<span class="p">{</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">size</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"-1"</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
		<span class="p">}</span>
		<span class="k">else</span>
		<span class="p">{</span>
			<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">back</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>

			<span class="k">if</span> <span class="p">(</span><span class="n">size</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span>
			<span class="p">{</span>
				<span class="n">back</span><span class="o">-&gt;</span><span class="n">prevNode</span><span class="o">-&gt;</span><span class="n">nextNode</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">;</span>
				<span class="n">back</span> <span class="o">=</span> <span class="n">back</span><span class="o">-&gt;</span><span class="n">prevNode</span><span class="p">;</span>
			<span class="p">}</span>
			<span class="k">else</span>
			<span class="p">{</span>
				<span class="n">front</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">;</span>
				<span class="n">back</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">;</span>
			<span class="p">}</span>

			<span class="n">size</span><span class="o">--</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span>

	<span class="kt">void</span> <span class="nf">Size</span><span class="p">()</span>
	<span class="p">{</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">size</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="kt">void</span> <span class="nf">Empty</span><span class="p">()</span>
	<span class="p">{</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">size</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="kt">void</span> <span class="nf">Front</span><span class="p">()</span>
	<span class="p">{</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">size</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"-1"</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
		<span class="p">}</span>
		<span class="k">else</span>
		<span class="p">{</span>
			<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">front</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span>

	<span class="kt">void</span> <span class="nf">Back</span><span class="p">()</span>
	<span class="p">{</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">size</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"-1"</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
		<span class="p">}</span>
		<span class="k">else</span>
		<span class="p">{</span>
			<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">back</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">ios</span><span class="o">::</span><span class="n">sync_with_stdio</span><span class="p">(</span><span class="nb">false</span><span class="p">);</span>
	<span class="n">cin</span><span class="p">.</span><span class="n">tie</span><span class="p">(</span><span class="nb">nullptr</span><span class="p">);</span>

	<span class="k">auto</span> <span class="n">newDeck</span> <span class="o">=</span> <span class="n">make_unique</span><span class="o">&lt;</span><span class="n">Deck</span><span class="o">&gt;</span><span class="p">();</span>

	<span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">x</span><span class="p">;</span>
	<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>

	<span class="k">while</span> <span class="p">(</span><span class="n">n</span><span class="o">--</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">string</span> <span class="n">order</span><span class="p">;</span>
		<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">order</span><span class="p">;</span>

		<span class="k">if</span> <span class="p">(</span><span class="n">order</span> <span class="o">==</span> <span class="s">"push_front"</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">x</span><span class="p">;</span>
			<span class="n">newDeck</span><span class="o">-&gt;</span><span class="n">Push_front</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
		<span class="p">}</span>
		<span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">order</span> <span class="o">==</span> <span class="s">"push_back"</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">x</span><span class="p">;</span>
			<span class="n">newDeck</span><span class="o">-&gt;</span><span class="n">Push_back</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
		<span class="p">}</span>
		<span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">order</span> <span class="o">==</span> <span class="s">"pop_front"</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">newDeck</span><span class="o">-&gt;</span><span class="n">Pop_front</span><span class="p">();</span>
		<span class="p">}</span>
		<span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">order</span> <span class="o">==</span> <span class="s">"pop_back"</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">newDeck</span><span class="o">-&gt;</span><span class="n">Pop_back</span><span class="p">();</span>
		<span class="p">}</span>
		<span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">order</span> <span class="o">==</span> <span class="s">"size"</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">newDeck</span><span class="o">-&gt;</span><span class="n">Size</span><span class="p">();</span>
		<span class="p">}</span>
		<span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">order</span> <span class="o">==</span> <span class="s">"empty"</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">newDeck</span><span class="o">-&gt;</span><span class="n">Empty</span><span class="p">();</span>
		<span class="p">}</span>
		<span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">order</span> <span class="o">==</span> <span class="s">"front"</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">newDeck</span><span class="o">-&gt;</span><span class="n">Front</span><span class="p">();</span>
		<span class="p">}</span>
		<span class="k">else</span>
		<span class="p">{</span>
			<span class="n">newDeck</span><span class="o">-&gt;</span><span class="n">Back</span><span class="p">();</span>
		<span class="p">}</span>
	<span class="p">}</span>

	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="정리">#정리</h3> <p>양방향 자료구조 deck을 만드는 문제. shared_ptr을 사용하여 효율적으로 구현하였다.</p>]]></content><author><name></name></author><category term="algorithm"/><category term="백준"/><category term="boj"/><category term="c++"/><category term="codingtest"/><category term="algorithm"/><summary type="html"><![CDATA[백준 C++ 풀이]]></summary></entry><entry><title type="html">[백준] 10816번 숫자 카드 2 / C++</title><link href="https://mhoo999.github.io/blog/2024/boj10816/" rel="alternate" type="text/html" title="[백준] 10816번 숫자 카드 2 / C++"/><published>2024-05-05T00:00:00+00:00</published><updated>2024-05-05T00:00:00+00:00</updated><id>https://mhoo999.github.io/blog/2024/boj10816</id><content type="html" xml:base="https://mhoo999.github.io/blog/2024/boj10816/"><![CDATA[<h3 id="문제">#문제</h3> <p><a href="https://www.acmicpc.net/problem/10816">백준 10816번 숫자 카드 2</a></p> <h3 id="풀이">#풀이</h3> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;cstdlib&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">cards</span><span class="p">[</span><span class="mi">20000000</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">0</span> <span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">ios</span><span class="o">::</span><span class="n">sync_with_stdio</span><span class="p">(</span><span class="nb">false</span><span class="p">);</span>
	<span class="n">cin</span><span class="p">.</span><span class="n">tie</span><span class="p">(</span><span class="nb">nullptr</span><span class="p">);</span>

	<span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">;</span>
	<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>

	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="kt">int</span> <span class="n">x</span><span class="p">;</span>
		<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">x</span><span class="p">;</span>

		<span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">cards</span><span class="p">[</span><span class="n">abs</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">+</span> <span class="mi">10000000</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
		<span class="p">}</span>
		<span class="k">else</span>
		<span class="p">{</span>
			<span class="n">cards</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span>

	<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">m</span><span class="p">;</span>

	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="kt">int</span> <span class="n">x</span><span class="p">;</span>
		<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">x</span><span class="p">;</span>

		<span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">cards</span><span class="p">[</span><span class="n">abs</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">+</span> <span class="mi">10000000</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
		<span class="p">}</span>
		<span class="k">else</span>
		<span class="p">{</span>
			<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">cards</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span>

	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="정리">#정리</h3> <p>처음 입력에서 n개의 숫자를 입력 받는다. 그리고 두 번째 입력에서 m개의 숫자를 입력 받는데, 각 숫자가 첫 입력에서 몇 번을 입력 받았는지 출력하는 문제. hash map을 이용하여 빠르게 입력 받고 count를 사용하여 출력하고자 했으나, 시간초과. 원초적 방법인 배열을 사용하여 해결했다. 이슈는 -10,000,000까지 숫자를 입력받을 수 있기 때문에, 음수를 입력받은 경우 사용할 수 있도록 10,000,000개의 배열을 추가로 받아 사용했다. 처음 입력에서 각 배열에 숫자를 더하고, 출력하여 간단하게 해결했다.</p>]]></content><author><name></name></author><category term="algorithm"/><category term="백준"/><category term="boj"/><category term="c++"/><category term="codingtest"/><category term="algorithm"/><summary type="html"><![CDATA[백준 C++ 풀이]]></summary></entry><entry><title type="html">[백준] 10845번 큐 / C++</title><link href="https://mhoo999.github.io/blog/2024/boj10845/" rel="alternate" type="text/html" title="[백준] 10845번 큐 / C++"/><published>2024-05-03T00:00:00+00:00</published><updated>2024-05-03T00:00:00+00:00</updated><id>https://mhoo999.github.io/blog/2024/boj10845</id><content type="html" xml:base="https://mhoo999.github.io/blog/2024/boj10845/"><![CDATA[<h3 id="문제">#문제</h3> <p><a href="https://www.acmicpc.net/problem/10845">백준 10845번 큐</a></p> <h3 id="풀이">#풀이</h3> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;memory&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span>	<span class="n">std</span><span class="p">;</span>

<span class="k">struct</span> <span class="nc">node</span>
<span class="p">{</span>
	<span class="kt">int</span> <span class="n">data</span><span class="p">;</span>
	<span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">node</span><span class="o">&gt;</span> <span class="n">prevNode</span><span class="p">;</span>
	<span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">node</span><span class="o">&gt;</span> <span class="n">nextNode</span><span class="p">;</span>

	<span class="n">node</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="o">:</span> <span class="n">data</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="n">prevNode</span><span class="p">(</span><span class="nb">nullptr</span><span class="p">),</span> <span class="n">nextNode</span><span class="p">(</span><span class="nb">nullptr</span><span class="p">)</span> <span class="p">{}</span>
<span class="p">};</span>

<span class="k">class</span> <span class="nc">queue</span>
<span class="p">{</span>
	<span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">node</span><span class="o">&gt;</span> <span class="n">front</span><span class="p">;</span>
	<span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">node</span><span class="o">&gt;</span> <span class="n">back</span><span class="p">;</span>
	<span class="kt">int</span> <span class="n">size</span><span class="p">;</span>

<span class="nl">public:</span>
	<span class="n">queue</span><span class="p">()</span> <span class="o">:</span> <span class="n">front</span><span class="p">(</span><span class="nb">nullptr</span><span class="p">),</span> <span class="n">back</span><span class="p">(</span><span class="nb">nullptr</span><span class="p">),</span> <span class="n">size</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{}</span>

	<span class="kt">void</span> <span class="nf">Push</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="k">auto</span> <span class="n">newNode</span> <span class="o">=</span> <span class="n">make_shared</span><span class="o">&lt;</span><span class="n">node</span><span class="o">&gt;</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>

		<span class="k">if</span> <span class="p">(</span><span class="n">size</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">front</span> <span class="o">=</span> <span class="n">newNode</span><span class="p">;</span>
			<span class="n">back</span> <span class="o">=</span> <span class="n">newNode</span><span class="p">;</span>
		<span class="p">}</span>
		<span class="k">else</span>
		<span class="p">{</span>
			<span class="n">back</span><span class="o">-&gt;</span><span class="n">nextNode</span> <span class="o">=</span> <span class="n">newNode</span><span class="p">;</span>
			<span class="n">newNode</span><span class="o">-&gt;</span><span class="n">prevNode</span> <span class="o">=</span> <span class="n">back</span><span class="p">;</span>

			<span class="n">back</span> <span class="o">=</span> <span class="n">newNode</span><span class="p">;</span>
		<span class="p">}</span>

		<span class="n">size</span><span class="o">++</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="kt">void</span> <span class="nf">Pop</span><span class="p">()</span>
	<span class="p">{</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">size</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"-1"</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
		<span class="p">}</span>
		<span class="k">else</span>
		<span class="p">{</span>
			<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">front</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
			
			<span class="n">front</span> <span class="o">=</span> <span class="n">front</span><span class="o">-&gt;</span><span class="n">nextNode</span><span class="p">;</span>
			<span class="k">if</span> <span class="p">(</span><span class="n">front</span> <span class="o">!=</span> <span class="nb">nullptr</span><span class="p">)</span> <span class="p">{</span>
				<span class="n">front</span><span class="o">-&gt;</span><span class="n">prevNode</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">;</span>
			<span class="p">}</span>

			<span class="n">size</span><span class="o">--</span><span class="p">;</span>

			<span class="k">if</span> <span class="p">(</span><span class="n">size</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
				<span class="n">back</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">;</span>
			<span class="p">}</span>
		<span class="p">}</span>
	<span class="p">}</span>

	<span class="kt">void</span> <span class="nf">Size</span><span class="p">()</span>
	<span class="p">{</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">size</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="kt">void</span> <span class="nf">Empty</span><span class="p">()</span>
	<span class="p">{</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">size</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="kt">void</span> <span class="nf">Front</span><span class="p">()</span>
	<span class="p">{</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">size</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">?</span> <span class="o">-</span><span class="mi">1</span> <span class="o">:</span> <span class="n">front</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="kt">void</span> <span class="nf">Back</span><span class="p">()</span>
	<span class="p">{</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">size</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">?</span> <span class="o">-</span><span class="mi">1</span> <span class="o">:</span> <span class="n">back</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">ios</span><span class="o">::</span><span class="n">sync_with_stdio</span><span class="p">(</span><span class="nb">false</span><span class="p">);</span>
	<span class="n">cin</span><span class="p">.</span><span class="n">tie</span><span class="p">(</span><span class="nb">nullptr</span><span class="p">);</span>

	<span class="k">auto</span> <span class="n">q</span> <span class="o">=</span> <span class="n">make_unique</span><span class="o">&lt;</span><span class="n">queue</span><span class="o">&gt;</span><span class="p">();</span>

	<span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">x</span><span class="p">;</span>
	<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>

	<span class="k">while</span> <span class="p">(</span><span class="n">n</span><span class="o">--</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">string</span> <span class="n">order</span><span class="p">;</span>
		<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">order</span><span class="p">;</span>

		<span class="k">if</span> <span class="p">(</span><span class="n">order</span> <span class="o">==</span> <span class="s">"push"</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">x</span><span class="p">;</span>
			<span class="n">q</span><span class="o">-&gt;</span><span class="n">Push</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
		<span class="p">}</span>
		<span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">order</span> <span class="o">==</span> <span class="s">"pop"</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">q</span><span class="o">-&gt;</span><span class="n">Pop</span><span class="p">();</span>
		<span class="p">}</span>
		<span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">order</span> <span class="o">==</span> <span class="s">"size"</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">q</span><span class="o">-&gt;</span><span class="n">Size</span><span class="p">();</span>
		<span class="p">}</span>
		<span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">order</span> <span class="o">==</span> <span class="s">"empty"</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">q</span><span class="o">-&gt;</span><span class="n">Empty</span><span class="p">();</span>
		<span class="p">}</span>
		<span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">order</span> <span class="o">==</span> <span class="s">"front"</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">q</span><span class="o">-&gt;</span><span class="n">Front</span><span class="p">();</span>
		<span class="p">}</span>
		<span class="k">else</span>
		<span class="p">{</span>
			<span class="n">q</span><span class="o">-&gt;</span><span class="n">Back</span><span class="p">();</span>
		<span class="p">}</span>
	<span class="p">}</span>

	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="정리">#정리</h3> <p>큐를 직접 구현. shared_ptr을 사용하여 큐, 노드를 메모리에서 자동으로 해제할 수 있도록 만들었다.</p>]]></content><author><name></name></author><category term="algorithm"/><category term="백준"/><category term="boj"/><category term="c++"/><category term="codingtest"/><category term="algorithm"/><summary type="html"><![CDATA[백준 C++ 풀이]]></summary></entry><entry><title type="html">[백준] 1158번 요세푸스 문제 / C++</title><link href="https://mhoo999.github.io/blog/2024/boj1158/" rel="alternate" type="text/html" title="[백준] 1158번 요세푸스 문제 / C++"/><published>2024-05-02T00:00:00+00:00</published><updated>2024-05-02T00:00:00+00:00</updated><id>https://mhoo999.github.io/blog/2024/boj1158</id><content type="html" xml:base="https://mhoo999.github.io/blog/2024/boj1158/"><![CDATA[<h3 id="문제">#문제</h3> <p><a href="https://www.acmicpc.net/problem/1158">백준 1158번 요세푸스 문제</a></p> <h3 id="풀이">#풀이</h3> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">vec</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">ios</span><span class="o">::</span><span class="n">sync_with_stdio</span><span class="p">(</span><span class="nb">false</span><span class="p">);</span>
    <span class="n">cin</span><span class="p">.</span><span class="n">tie</span><span class="p">(</span><span class="nb">nullptr</span><span class="p">);</span>
    
    <span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">k</span><span class="p">;</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span> <span class="o">&gt;&gt;</span> <span class="n">k</span><span class="p">;</span>
    
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">vec</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>
    
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="sc">'&lt;'</span><span class="p">;</span>
    
    <span class="kt">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    
    <span class="k">while</span><span class="p">(</span><span class="mi">1</span> <span class="o">&lt;</span> <span class="n">vec</span><span class="p">.</span><span class="n">size</span><span class="p">())</span>
    <span class="p">{</span>
        <span class="n">idx</span> <span class="o">=</span> <span class="p">(</span><span class="n">idx</span> <span class="o">+</span> <span class="n">k</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">vec</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
        
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">vec</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">", "</span><span class="p">;</span>
        <span class="n">vec</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">vec</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="n">idx</span><span class="p">);</span>
    <span class="p">}</span>
    
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">vec</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="sc">'&gt;'</span><span class="p">;</span>
    
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="정리">#정리</h3> <p>n개의 원소를 배열로 받아, k번째 원소를 출력/삭제하며 줄여가는 문제. 인덱스를 선언하여 출력할 원소를 연산하는 것이 포인트, 출력한 원소는 배열에서 삭제하고 모든 원소가 출력될 때까지 반복하여 해결.</p>]]></content><author><name></name></author><category term="algorithm"/><category term="백준"/><category term="boj"/><category term="c++"/><category term="codingtest"/><category term="algorithm"/><summary type="html"><![CDATA[백준 C++ 풀이]]></summary></entry><entry><title type="html">[백준] 1018번 체스판 다시 칠하기 / C++</title><link href="https://mhoo999.github.io/blog/2024/boj1018/" rel="alternate" type="text/html" title="[백준] 1018번 체스판 다시 칠하기 / C++"/><published>2024-05-01T00:00:00+00:00</published><updated>2024-05-01T00:00:00+00:00</updated><id>https://mhoo999.github.io/blog/2024/boj1018</id><content type="html" xml:base="https://mhoo999.github.io/blog/2024/boj1018/"><![CDATA[<h3 id="문제">#문제</h3> <p><a href="https://www.acmicpc.net/problem/1018">백준 1018번 체스판 다시 칠하기</a></p> <h3 id="풀이">#풀이</h3> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">char</span> <span class="n">board</span><span class="p">[</span><span class="mi">50</span><span class="p">][</span><span class="mi">50</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">minNum</span><span class="p">(</span><span class="mi">64</span><span class="p">);</span>

<span class="kt">char</span> <span class="n">wb</span><span class="p">[</span><span class="mi">8</span><span class="p">][</span><span class="mi">8</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
	<span class="p">{</span><span class="sc">'W'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">,</span> <span class="sc">'W'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">,</span> <span class="sc">'W'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">,</span> <span class="sc">'W'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">},</span>
	<span class="p">{</span><span class="sc">'B'</span><span class="p">,</span> <span class="sc">'W'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">,</span> <span class="sc">'W'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">,</span> <span class="sc">'W'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">,</span> <span class="sc">'W'</span><span class="p">},</span>
	<span class="p">{</span><span class="sc">'W'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">,</span> <span class="sc">'W'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">,</span> <span class="sc">'W'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">,</span> <span class="sc">'W'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">},</span>
	<span class="p">{</span><span class="sc">'B'</span><span class="p">,</span> <span class="sc">'W'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">,</span> <span class="sc">'W'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">,</span> <span class="sc">'W'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">,</span> <span class="sc">'W'</span><span class="p">},</span>
	<span class="p">{</span><span class="sc">'W'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">,</span> <span class="sc">'W'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">,</span> <span class="sc">'W'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">,</span> <span class="sc">'W'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">},</span>
	<span class="p">{</span><span class="sc">'B'</span><span class="p">,</span> <span class="sc">'W'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">,</span> <span class="sc">'W'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">,</span> <span class="sc">'W'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">,</span> <span class="sc">'W'</span><span class="p">},</span>
	<span class="p">{</span><span class="sc">'W'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">,</span> <span class="sc">'W'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">,</span> <span class="sc">'W'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">,</span> <span class="sc">'W'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">},</span>
	<span class="p">{</span><span class="sc">'B'</span><span class="p">,</span> <span class="sc">'W'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">,</span> <span class="sc">'W'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">,</span> <span class="sc">'W'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">,</span> <span class="sc">'W'</span><span class="p">},</span>
<span class="p">};</span>

<span class="kt">char</span> <span class="n">bw</span><span class="p">[</span><span class="mi">8</span><span class="p">][</span><span class="mi">8</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
	<span class="p">{</span><span class="sc">'B'</span><span class="p">,</span> <span class="sc">'W'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">,</span> <span class="sc">'W'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">,</span> <span class="sc">'W'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">,</span> <span class="sc">'W'</span><span class="p">},</span>
	<span class="p">{</span><span class="sc">'W'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">,</span> <span class="sc">'W'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">,</span> <span class="sc">'W'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">,</span> <span class="sc">'W'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">},</span>
	<span class="p">{</span><span class="sc">'B'</span><span class="p">,</span> <span class="sc">'W'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">,</span> <span class="sc">'W'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">,</span> <span class="sc">'W'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">,</span> <span class="sc">'W'</span><span class="p">},</span>
	<span class="p">{</span><span class="sc">'W'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">,</span> <span class="sc">'W'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">,</span> <span class="sc">'W'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">,</span> <span class="sc">'W'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">},</span>
	<span class="p">{</span><span class="sc">'B'</span><span class="p">,</span> <span class="sc">'W'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">,</span> <span class="sc">'W'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">,</span> <span class="sc">'W'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">,</span> <span class="sc">'W'</span><span class="p">},</span>
	<span class="p">{</span><span class="sc">'W'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">,</span> <span class="sc">'W'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">,</span> <span class="sc">'W'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">,</span> <span class="sc">'W'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">},</span>
	<span class="p">{</span><span class="sc">'B'</span><span class="p">,</span> <span class="sc">'W'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">,</span> <span class="sc">'W'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">,</span> <span class="sc">'W'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">,</span> <span class="sc">'W'</span><span class="p">},</span>
	<span class="p">{</span><span class="sc">'W'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">,</span> <span class="sc">'W'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">,</span> <span class="sc">'W'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">,</span> <span class="sc">'W'</span><span class="p">,</span> <span class="sc">'B'</span><span class="p">},</span>
<span class="p">};</span>

<span class="kt">void</span> <span class="nf">checkWb</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span>
<span class="p">{</span>
	<span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="k">if</span> <span class="p">(</span><span class="n">wb</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="n">board</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">x</span><span class="p">][</span><span class="n">j</span> <span class="o">+</span> <span class="n">y</span><span class="p">])</span>
			<span class="p">{</span>
				<span class="n">cnt</span><span class="o">++</span><span class="p">;</span>
			<span class="p">}</span>
		<span class="p">}</span>
	<span class="p">}</span>

	<span class="k">if</span> <span class="p">(</span><span class="n">cnt</span> <span class="o">&lt;</span> <span class="n">minNum</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">minNum</span> <span class="o">=</span> <span class="n">cnt</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">checkBw</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span>
<span class="p">{</span>
	<span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="k">if</span> <span class="p">(</span><span class="n">bw</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="n">board</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">x</span><span class="p">][</span><span class="n">j</span> <span class="o">+</span> <span class="n">y</span><span class="p">])</span>
			<span class="p">{</span>
				<span class="n">cnt</span><span class="o">++</span><span class="p">;</span>
			<span class="p">}</span>
		<span class="p">}</span>
	<span class="p">}</span>

	<span class="k">if</span> <span class="p">(</span><span class="n">cnt</span> <span class="o">&lt;</span> <span class="n">minNum</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">minNum</span> <span class="o">=</span> <span class="n">cnt</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">ios</span><span class="o">::</span><span class="n">sync_with_stdio</span><span class="p">(</span><span class="nb">false</span><span class="p">);</span>
	<span class="n">cin</span><span class="p">.</span><span class="n">tie</span><span class="p">(</span><span class="nb">nullptr</span><span class="p">);</span>

	<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span> <span class="o">&gt;&gt;</span> <span class="n">m</span><span class="p">;</span>

	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="kt">char</span> <span class="n">c</span><span class="p">;</span>
			<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">c</span><span class="p">;</span>

			<span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">c</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span>

	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">7</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">m</span> <span class="o">-</span> <span class="mi">7</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">checkWb</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">);</span>
			<span class="n">checkBw</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">);</span>
		<span class="p">}</span>
	<span class="p">}</span>

	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">minNum</span><span class="p">;</span>

	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="정리">#정리</h3> <p>흰색, 검은색 타일이 연속된 최대 50x50 보드에서 8x8 크기를 잘라낸 후, 체스판으로 만드는 데 필요한 최소 비용을 구하는 문제이다. 나는 부르트포스를 이용해 <code class="language-plaintext highlighter-rouge">(0, 0)</code>부터 <code class="language-plaintext highlighter-rouge">(N-7, M-7)</code>까지 8x8의 범위를 최소 비용의 타일맵과 비교하여 문제를 해결했다. 비교 방법에 대해 고민을 많이 했다. NxM 보드에서 0-8, 1-9, 2-10… 까지 8개씩 끊어서 비교하는 방법, 그리고 비교타겟은 0-8인데, board의 1-9의 타일을 어떻게 비교할 것인지에 대해 고민했다. 풀고나니 간단했다. 함수를 떼어내 시작 숫자를 더하여 해결했다.</p>]]></content><author><name></name></author><category term="algorithm"/><category term="백준"/><category term="boj"/><category term="c++"/><category term="codingtest"/><category term="algorithm"/><summary type="html"><![CDATA[백준 C++ 풀이]]></summary></entry><entry><title type="html">[백준] 10773번 제로 / C++</title><link href="https://mhoo999.github.io/blog/2024/boj10773/" rel="alternate" type="text/html" title="[백준] 10773번 제로 / C++"/><published>2024-04-30T00:00:00+00:00</published><updated>2024-04-30T00:00:00+00:00</updated><id>https://mhoo999.github.io/blog/2024/boj10773</id><content type="html" xml:base="https://mhoo999.github.io/blog/2024/boj10773/"><![CDATA[<h3 id="문제">#문제</h3> <p><a href="https://www.acmicpc.net/problem/10773">백준 10773번 제로</a></p> <h3 id="풀이">#풀이</h3> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">cashBook</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">ios</span><span class="o">::</span><span class="n">sync_with_stdio</span><span class="p">(</span><span class="nb">false</span><span class="p">);</span>
	<span class="n">cin</span><span class="p">.</span><span class="n">tie</span><span class="p">(</span><span class="nb">nullptr</span><span class="p">);</span>

	<span class="kt">int</span> <span class="n">k</span><span class="p">;</span>
	<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">k</span><span class="p">;</span>

	<span class="k">while</span> <span class="p">(</span><span class="n">k</span><span class="o">--</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="kt">int</span> <span class="n">x</span><span class="p">;</span>
		<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">x</span><span class="p">;</span>

		<span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">cashBook</span><span class="p">.</span><span class="n">pop_back</span><span class="p">();</span>
		<span class="p">}</span>
		<span class="k">else</span>
		<span class="p">{</span>
			<span class="n">cashBook</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
		<span class="p">}</span>
	<span class="p">}</span>

	<span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">cashBook</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">ans</span> <span class="o">+=</span> <span class="n">cashBook</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
	<span class="p">}</span>

	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ans</span><span class="p">;</span>

	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="정리">#정리</h3> <p>k개 숫자를 입력 받아 저장하는데, 0이 입력되면 바로 전에 입력된 숫자를 지운다. 마지막에 저장된 모든 숫자를 더해 출력하면 되는 간단한 문제. vector를 이용하여 숫자를 입력받은 후 연산을 수행하여 해결.</p>]]></content><author><name></name></author><category term="algorithm"/><category term="백준"/><category term="boj"/><category term="c++"/><category term="codingtest"/><category term="algorithm"/><summary type="html"><![CDATA[백준 C++ 풀이]]></summary></entry><entry><title type="html">[백준] 1920번 수 찾기 / C++</title><link href="https://mhoo999.github.io/blog/2024/boj1920/" rel="alternate" type="text/html" title="[백준] 1920번 수 찾기 / C++"/><published>2024-04-29T00:00:00+00:00</published><updated>2024-04-29T00:00:00+00:00</updated><id>https://mhoo999.github.io/blog/2024/boj1920</id><content type="html" xml:base="https://mhoo999.github.io/blog/2024/boj1920/"><![CDATA[<h3 id="문제">#문제</h3> <p><a href="https://www.acmicpc.net/problem/1920">백준 1920번 수 찾기</a></p> <h3 id="풀이">#풀이</h3> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;unordered_set&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="n">unordered_set</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">set</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">ios</span><span class="o">::</span><span class="n">sync_with_stdio</span><span class="p">(</span><span class="nb">false</span><span class="p">);</span>
	<span class="n">cin</span><span class="p">.</span><span class="n">tie</span><span class="p">(</span><span class="nb">nullptr</span><span class="p">);</span>

	<span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">;</span>
	<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>

	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="kt">int</span> <span class="n">x</span><span class="p">;</span>
		<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">x</span><span class="p">;</span>

		<span class="n">set</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
	<span class="p">}</span>

	<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">m</span><span class="p">;</span>

	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="kt">int</span> <span class="n">x</span><span class="p">;</span>
		<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">x</span><span class="p">;</span>

		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="p">((</span><span class="n">set</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">!=</span> <span class="n">set</span><span class="p">.</span><span class="n">end</span><span class="p">())</span> <span class="o">?</span> <span class="s">"1"</span> <span class="o">:</span> <span class="s">"0"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="정리">#정리</h3> <p>N개의 정수를 입력 받고, M개의 정수를 입력 받아 이전에 입력받은 정수 집합에 속하는 정수인지 확인하는 프로그램을 작성한다. 중복에 대한 처리가 필요없으므로, 원소를 찾는데 가장 속도가 빠른 해쉬셋을 사용했다. 존재 여부를 판단할 때, <code class="language-plaintext highlighter-rouge">find(x)</code> 함수는 x가 존재할 경우 Iterator를 반환하고, 없으면 <code class="language-plaintext highlighter-rouge">end()</code>를 반환한다. 조건에 따라 코드를 작성하여 해결.</p>]]></content><author><name></name></author><category term="algorithm"/><category term="백준"/><category term="boj"/><category term="c++"/><category term="codingtest"/><category term="algorithm"/><summary type="html"><![CDATA[백준 C++ 풀이]]></summary></entry><entry><title type="html">[백준] 10828번 스택 / C++</title><link href="https://mhoo999.github.io/blog/2024/boj10828/" rel="alternate" type="text/html" title="[백준] 10828번 스택 / C++"/><published>2024-04-28T00:00:00+00:00</published><updated>2024-04-28T00:00:00+00:00</updated><id>https://mhoo999.github.io/blog/2024/boj10828</id><content type="html" xml:base="https://mhoo999.github.io/blog/2024/boj10828/"><![CDATA[<h3 id="문제">#문제</h3> <p><a href="https://www.acmicpc.net/problem/10828">백준 10828번 스택</a></p> <h3 id="풀이">#풀이</h3> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;memory&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">struct</span> <span class="nc">Node</span>
<span class="p">{</span>
	<span class="kt">int</span> <span class="n">data</span><span class="p">;</span>
	<span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">Node</span><span class="o">&gt;</span> <span class="n">prevNode</span><span class="p">;</span>

	<span class="n">Node</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="o">:</span> <span class="n">data</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="n">prevNode</span><span class="p">(</span><span class="nb">nullptr</span><span class="p">)</span> <span class="p">{}</span>
<span class="p">};</span>

<span class="k">class</span> <span class="nc">St</span>
<span class="p">{</span>
	<span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">Node</span><span class="o">&gt;</span> <span class="n">top</span><span class="p">;</span>
	<span class="kt">int</span> <span class="n">size</span><span class="p">;</span>

<span class="nl">public:</span>
	<span class="n">St</span><span class="p">()</span> <span class="o">:</span> <span class="n">top</span><span class="p">(</span><span class="nb">nullptr</span><span class="p">),</span> <span class="n">size</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{}</span>

	<span class="kt">void</span> <span class="nf">Push</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="k">auto</span> <span class="n">newNode</span> <span class="o">=</span> <span class="n">make_unique</span><span class="o">&lt;</span><span class="n">Node</span><span class="o">&gt;</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>

		<span class="n">newNode</span><span class="o">-&gt;</span><span class="n">prevNode</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">top</span><span class="p">);</span>
		<span class="n">top</span> <span class="o">=</span> <span class="n">move</span><span class="p">(</span><span class="n">newNode</span><span class="p">);</span>
		<span class="n">size</span><span class="o">++</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="kt">void</span> <span class="nf">Pop</span><span class="p">()</span>
	<span class="p">{</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">top</span> <span class="o">!=</span> <span class="nb">nullptr</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">top</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
			<span class="n">top</span> <span class="o">=</span> <span class="n">move</span><span class="p">(</span><span class="n">top</span><span class="o">-&gt;</span><span class="n">prevNode</span><span class="p">);</span>
			<span class="n">size</span><span class="o">--</span><span class="p">;</span>
		<span class="p">}</span>
		<span class="k">else</span>
		<span class="p">{</span>
			<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"-1"</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="kt">void</span> <span class="nf">Size</span><span class="p">()</span>
	<span class="p">{</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">size</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="kt">void</span> <span class="nf">Empty</span><span class="p">()</span>
	<span class="p">{</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">size</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">?</span> <span class="sc">'1'</span> <span class="o">:</span> <span class="sc">'0'</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="kt">void</span> <span class="nf">Top</span><span class="p">()</span>
	<span class="p">{</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">top</span> <span class="o">!=</span> <span class="nb">nullptr</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">top</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
		<span class="p">}</span>
		<span class="k">else</span>
		<span class="p">{</span>
			<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"-1"</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">ios</span><span class="o">::</span><span class="n">sync_with_stdio</span><span class="p">(</span><span class="nb">false</span><span class="p">);</span>
	<span class="n">cin</span><span class="p">.</span><span class="n">tie</span><span class="p">(</span><span class="nb">nullptr</span><span class="p">);</span>

	<span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
	<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>

	<span class="k">auto</span> <span class="n">st</span> <span class="o">=</span> <span class="n">make_unique</span><span class="o">&lt;</span><span class="n">St</span><span class="o">&gt;</span><span class="p">();</span>

	<span class="k">while</span> <span class="p">(</span><span class="n">n</span><span class="o">--</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">string</span> <span class="n">oper</span><span class="p">;</span>
		<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">oper</span><span class="p">;</span>

		<span class="k">if</span> <span class="p">(</span><span class="n">oper</span> <span class="o">==</span> <span class="s">"push"</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="kt">int</span> <span class="n">x</span><span class="p">;</span>
			<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">x</span><span class="p">;</span>

			<span class="n">st</span><span class="o">-&gt;</span><span class="n">Push</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
		<span class="p">}</span>
		<span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">oper</span> <span class="o">==</span> <span class="s">"pop"</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">st</span><span class="o">-&gt;</span><span class="n">Pop</span><span class="p">();</span>
		<span class="p">}</span>
		<span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">oper</span> <span class="o">==</span> <span class="s">"size"</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">st</span><span class="o">-&gt;</span><span class="n">Size</span><span class="p">();</span>
		<span class="p">}</span>
		<span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">oper</span> <span class="o">==</span> <span class="s">"empty"</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">st</span><span class="o">-&gt;</span><span class="n">Empty</span><span class="p">();</span>
		<span class="p">}</span>
		<span class="k">else</span>
		<span class="p">{</span>
			<span class="n">st</span><span class="o">-&gt;</span><span class="n">Top</span><span class="p">();</span>
		<span class="p">}</span>
	<span class="p">}</span>

	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="정리">#정리</h3> <p>문제 목적에 따라 직접 스택을 구현하여 해결. 스마트 포인터를 사용하여 해제를 신경쓰지 않도록 작성했다.</p>]]></content><author><name></name></author><category term="algorithm"/><category term="백준"/><category term="boj"/><category term="c++"/><category term="codingtest"/><category term="algorithm"/><summary type="html"><![CDATA[백준 C++ 풀이]]></summary></entry><entry><title type="html">[백준] 1065번 한수 / C++</title><link href="https://mhoo999.github.io/blog/2024/boj1065/" rel="alternate" type="text/html" title="[백준] 1065번 한수 / C++"/><published>2024-04-27T00:00:00+00:00</published><updated>2024-04-27T00:00:00+00:00</updated><id>https://mhoo999.github.io/blog/2024/boj1065</id><content type="html" xml:base="https://mhoo999.github.io/blog/2024/boj1065/"><![CDATA[<h3 id="문제">#문제</h3> <p><a href="https://www.acmicpc.net/problem/1065">백준 1065번 한수</a></p> <h3 id="풀이">#풀이</h3> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">ios</span><span class="o">::</span><span class="n">sync_with_stdio</span><span class="p">(</span><span class="nb">false</span><span class="p">);</span>
	<span class="n">cin</span><span class="p">.</span><span class="n">tie</span><span class="p">(</span><span class="nb">nullptr</span><span class="p">);</span>

	<span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
	<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>

	<span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

	<span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">&lt;</span> <span class="mi">100</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">cnt</span> <span class="o">=</span> <span class="n">n</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="k">else</span>
	<span class="p">{</span>
		<span class="n">cnt</span> <span class="o">=</span> <span class="mi">99</span><span class="p">;</span>

		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="kt">int</span> <span class="n">hun</span> <span class="o">=</span> <span class="n">i</span> <span class="o">/</span> <span class="mi">100</span><span class="p">;</span>
			<span class="kt">int</span> <span class="n">ten</span> <span class="o">=</span> <span class="p">(</span><span class="n">i</span> <span class="o">/</span> <span class="mi">10</span><span class="p">)</span> <span class="o">%</span> <span class="mi">10</span><span class="p">;</span>
			<span class="kt">int</span> <span class="n">one</span> <span class="o">=</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">10</span><span class="p">;</span>

			<span class="k">if</span> <span class="p">((</span><span class="n">hun</span> <span class="o">-</span> <span class="n">ten</span><span class="p">)</span> <span class="o">==</span> <span class="p">(</span><span class="n">ten</span> <span class="o">-</span> <span class="n">one</span><span class="p">))</span>
			<span class="p">{</span>
				<span class="n">cnt</span><span class="o">++</span><span class="p">;</span>
			<span class="p">}</span>
		<span class="p">}</span>
	<span class="p">}</span>

	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">cnt</span><span class="p">;</span>

	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="정리">#정리</h3> <p>각 자리가 등차수열을 이룬다면, 그 수를 한수라고 한다. 100 이하인 경우에는 비교가능한 자릿수가 없기 때문에 바로 출력하고, 100 이상일 경우에는 각 자리수의 차를 비교하여 카운트하여 출력한다.</p>]]></content><author><name></name></author><category term="algorithm"/><category term="백준"/><category term="boj"/><category term="c++"/><category term="codingtest"/><category term="algorithm"/><summary type="html"><![CDATA[백준 C++ 풀이]]></summary></entry><entry><title type="html">[백준] 9012번 괄호 / C++</title><link href="https://mhoo999.github.io/blog/2024/boj9012/" rel="alternate" type="text/html" title="[백준] 9012번 괄호 / C++"/><published>2024-04-26T00:00:00+00:00</published><updated>2024-04-26T00:00:00+00:00</updated><id>https://mhoo999.github.io/blog/2024/boj9012</id><content type="html" xml:base="https://mhoo999.github.io/blog/2024/boj9012/"><![CDATA[<h3 id="문제">#문제</h3> <p><a href="https://www.acmicpc.net/problem/9012">백준 9012번 괄호</a></p> <h3 id="풀이">#풀이</h3> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stack&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">ios</span><span class="o">::</span><span class="n">sync_with_stdio</span><span class="p">(</span><span class="nb">false</span><span class="p">);</span>
	<span class="n">cin</span><span class="p">.</span><span class="n">tie</span><span class="p">(</span><span class="nb">nullptr</span><span class="p">);</span>

	<span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
	<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">t</span><span class="p">;</span>

	<span class="k">while</span> <span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">stack</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">st</span><span class="p">;</span>

		<span class="n">string</span> <span class="n">ps</span><span class="p">;</span>
		<span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">ps</span><span class="p">;</span>

		<span class="kt">bool</span> <span class="n">vps</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>

		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">ps</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="k">if</span> <span class="p">(</span><span class="n">ps</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'('</span><span class="p">)</span>
			<span class="p">{</span>
				<span class="n">st</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
			<span class="p">}</span>
			<span class="k">else</span>
			<span class="p">{</span>
				<span class="k">if</span> <span class="p">(</span><span class="n">st</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
				<span class="p">{</span>
					<span class="n">vps</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
				<span class="p">}</span>
				<span class="k">else</span>
				<span class="p">{</span>
					<span class="n">st</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
				<span class="p">}</span>
			<span class="p">}</span>
		<span class="p">}</span>

		<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">st</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
		<span class="p">{</span>
			<span class="n">vps</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
		<span class="p">}</span>

		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="p">((</span><span class="n">vps</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="o">?</span> <span class="s">"YES"</span> <span class="o">:</span> <span class="s">"NO"</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="정리">#정리</h3> <p>입려된 모든 괄호 내 순서대로 ‘(‘와 ‘)’의 짝이 모두 맞아야 VPS가 성립된다고 한다. 보자마자 버퍼를 생각했고, “’(‘가 입력되었을 때, ‘)’가 입력되어야 하나의 짝이 이루어져 나간다”라는 조건 하에 코드를 작업. 스택이 효율적이라고 생각하였고, ‘(‘가 입력되었을 때 스택에 <code class="language-plaintext highlighter-rouge">push</code>, ‘)’가 입력되었을 땐 st 내 원소 존재 여부에 따라 있으면 pop, 없다면 vps = false를 진행. 마지막에 스택이 <code class="language-plaintext highlighter-rouge">empty</code>가 아니라면 모든 짝이 이루어지지 않은 것이기 때문에 다시 한 번 vps = false로 처리해주고, vps를 출력하여 해결.</p>]]></content><author><name></name></author><category term="algorithm"/><category term="백준"/><category term="boj"/><category term="c++"/><category term="codingtest"/><category term="algorithm"/><summary type="html"><![CDATA[백준 C++ 풀이]]></summary></entry></feed>